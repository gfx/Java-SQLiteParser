// SQLite.jj - SQLite DDL grammar processed by JavaCC 7.0
// language reference: https://www.sqlite.org/lang.html
// see also https://github.com/gfx/Android-Orma/blob/master/migration/src/main/antlr/SQLite.g4

options {
    IGNORE_CASE = true;
    STATIC = false;
	DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN (SQLiteParser)

package com.github.gfx.sqlite_ddl.g;

import com.gighub.gfx.sqlite_ddl.*;

import java.util.*;

// foo

@SuppressWarnings("unused")
public class SQLiteParser {
    final List<Exception> parseErrors = new ArrayList<Exception>();
}

PARSER_END (SQLiteParser)

SKIP:
{
    <WHITESPACE: " " | "\t" | "\r" | "\n">
}

SPECIAL_TOKEN:
{
   <LINE_COMMENT: "--"(~["\r","\n"])*>
|  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


// Keywords from https://www.sqlite.org/lang_keywords.html
TOKEN:
{
  <K_ABORT: "ABORT">
| <K_ACTION: "ACTION">
| <K_ADD: "ADD">
| <K_AFTER: "AFTER">
| <K_ALL: "ALL">
| <K_ALTER: "ALTER">
| <K_ANALYZE: "ANALYZE">
| <K_AND: "AND">
| <K_AS: "AS">
| <K_ASC: "ASC">
| <K_ATTACH: "ATTACH">
| <K_AUTOINCREMENT: "AUTOINCREMENT">
| <K_BEFORE: "BEFORE">
| <K_BEGIN: "BEGIN">
| <K_BETWEEN: "BETWEEN">
| <K_BY: "BY">
| <K_CASCADE: "CASCADE">
| <K_CASE: "CASE">
| <K_CAST: "CAST">
| <K_CHECK: "CHECK">
| <K_COLLATE: "COLLATE">
| <K_COLUMN: "COLUMN">
| <K_COMMIT: "COMMIT">
| <K_CONFLICT: "CONFLICT">
| <K_CONSTRAINT: "CONSTRAINT">
| <K_CREATE: "CREATE">
| <K_CROSS: "CROSS">
| <K_CURRENT_DATE: "CURRENT_DATE">
| <K_CURRENT_TIME: "CURRENT_TIME">
| <K_CURRENT_TIMESTAMP: "CURRENT_TIMESTAMP">
| <K_DATABASE: "DATABASE">
| <K_DEFAULT: "DEFAULT">
| <K_DEFERRABLE: "DEFERRABLE">
| <K_DEFERRED: "DEFERRED">
| <K_DELETE: "DELETE">
| <K_DESC: "DESC">
| <K_DETACH: "DETACH">
| <K_DISTINCT: "DISTINCT">
| <K_DROP: "DROP">
| <K_EACH: "EACH">
| <K_ELSE: "ELSE">
| <K_END: "END">
| <K_ESCAPE: "ESCAPE">
| <K_EXCEPT: "EXCEPT">
| <K_EXCLUSIVE: "EXCLUSIVE">
| <K_EXISTS: "EXISTS">
| <K_EXPLAIN: "EXPLAIN">
| <K_FAIL: "FAIL">
| <K_FOR: "FOR">
| <K_FOREIGN: "FOREIGN">
| <K_FROM: "FROM">
| <K_FULL: "FULL">
| <K_GLOB: "GLOB">
| <K_GROUP: "GROUP">
| <K_HAVING: "HAVING">
| <K_IF: "IF">
| <K_IGNORE: "IGNORE">
| <K_IMMEDIATE: "IMMEDIATE">
| <K_IN: "IN">
| <K_INDEX: "INDEX">
| <K_INDEXED: "INDEXED">
| <K_INITIALLY: "INITIALLY">
| <K_INNER: "INNER">
| <K_INSERT: "INSERT">
| <K_INSTEAD: "INSTEAD">
| <K_INTERSECT: "INTERSECT">
| <K_INTO: "INTO">
| <K_IS: "IS">
| <K_ISNULL: "ISNULL">
| <K_JOIN: "JOIN">
| <K_KEY: "KEY">
| <K_LEFT: "LEFT">
| <K_LIKE: "LIKE">
| <K_LIMIT: "LIMIT">
| <K_MATCH: "MATCH">
| <K_NATURAL: "NATURAL">
| <K_NO: "NO">
| <K_NOT: "NOT">
| <K_NOTNULL: "NOTNULL">
| <K_NULL: "NULL">
| <K_OF: "OF">
| <K_OFFSET: "OFFSET">
| <K_ON: "ON">
| <K_OR: "OR">
| <K_ORDER: "ORDER">
| <K_OUTER: "OUTER">
| <K_PLAN: "PLAN">
| <K_PRAGMA: "PRAGMA">
| <K_PRIMARY: "PRIMARY">
| <K_QUERY: "QUERY">
| <K_RAISE: "RAISE">
| <K_RECURSIVE: "RECURSIVE">
| <K_REFERENCES: "REFERENCES">
| <K_REGEXP: "REGEXP">
| <K_REINDEX: "REINDEX">
| <K_RELEASE: "RELEASE">
| <K_RENAME: "RENAME">
| <K_REPLACE: "REPLACE">
| <K_RESTRICT: "RESTRICT">
| <K_RIGHT: "RIGHT">
| <K_ROLLBACK: "ROLLBACK">
| <K_ROW: "ROW">
| <K_SAVEPOINT: "SAVEPOINT">
| <K_SELECT: "SELECT">
| <K_SET: "SET">
| <K_TABLE: "TABLE">
| <K_TEMP: "TEMP">
| <K_TEMPORARY: "TEMPORARY">
| <K_THEN: "THEN">
| <K_TO: "TO">
| <K_TRANSACTION: "TRANSACTION">
| <K_TRIGGER: "TRIGGER">
| <K_UNION: "UNION">
| <K_UNIQUE: "UNIQUE">
| <K_UPDATE: "UPDATE">
| <K_USING: "USING">
| <K_VACUUM: "VACUUM">
| <K_VALUES: "VALUES">
| <K_VIEW: "VIEW">
| <K_VIRTUAL: "VIRTUAL">
| <K_WHEN: "WHEN">
| <K_WHERE: "WHERE">
| <K_WITH: "WITH">
| <K_WITHOUT: "WITHOUT">
}

// Operators

TOKEN:
{
  <OP_CONCAT: "||">
| <OP_LEFT_SHIFT: "<<">
| <OP_RIGHT_SHIFT: ">>">
| <OP_EQ: "==">
| <OP_GE: ">=">
| <OP_LE: "<=">
| <OP_NE: ("<>" | "!=")>
}

TOKEN:
{
  <NUMERIC_LITERAL:
      (<DIGITS>)? ("." (<DIGITS>)?)? ( "E" (<SIGN>)? <DIGITS>)?
    |  "." <DIGITS> ("E" (<SIGN>)? <DIGITS>)?
    | "0x" ( <HEX_DIGIT> )+ >
| <#DIGITS: ( <DIGIT> )+ >
| <DIGIT: ["0" - "9"] >
| <#SIGN: ["+", "-"]>
| <#HEX_DIGIT: ["0"-"9","A"-"F"]  >
| <STRING_LITERAL: ("'" ( ~["'"] | "''" )* "'") >
| <BLOB_LITERAL: "X" "'" (<HEX_DIGIT>)+ "'">
| <IDENTIFIER: ["A"-"Z","a"-"z","_"] (["A"-"Z","a"-"z","0"-"9","_"])*
             | "\"" (~["\n","\r","\""] | "\"\"")+ "\""
             | ("`"  (~["\n","\r","`"]  | "``")+   "`")
             | ("["  (~["\n","\r","]"])+           "]") >
}

// Syntax

void CreateStatement(): {
    CreateTableStatement createTableStatement = new CreateTableStatement();

} {
    <K_CREATE> <K_TABLE> <IDENTIFIER> "("
        <IDENTIFIER> "INTEGER PRIMARY KEY"
    ")"
}
