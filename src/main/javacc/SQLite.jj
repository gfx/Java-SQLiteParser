// SQLite.jj - SQLite DDL grammar processed by JavaCC 7.0
// language reference: https://www.sqlite.org/lang.html
// see also https://github.com/gfx/Android-Orma/blob/master/migration/src/main/antlr/SQLite.g4

options {
    IGNORE_CASE = true;
    STATIC = false;
	DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    UNICODE_INPUT = true;
    COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN (SQLiteParser)

package com.github.gfx.sqlite_ddl.g;

import com.github.gfx.sqlite_ddl.*;

import java.util.*;

public class SQLiteParser {
    final List<Exception> parseErrors = new ArrayList<Exception>();
}

PARSER_END (SQLiteParser)


TOKEN_MGR_DECLS: {

    private final Set<SQLiteStatement> subscribers = new HashSet<SQLiteStatement>();

    public void CommonTokenAction(Token token) {
        for (SQLiteStatement c : subscribers) {
            c.addToken(token);
        }
    }

    public void subscribe(SQLiteStatement c) {
        subscribers.add(c);
    }

    public void unsubscribe(SQLiteStatement c) {
        subscribers.remove(c);
    }
}

SKIP: {
    <WHITESPACE: " " | "\t" | "\r" | "\n">
}

SPECIAL_TOKEN: {
   <LINE_COMMENT: "--"(~["\r","\n"])*>
|  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


// Keywords from https://www.sqlite.org/lang_keywords.html
TOKEN: {
  <K_ABORT: "ABORT">
| <K_ACTION: "ACTION">
| <K_ADD: "ADD">
| <K_AFTER: "AFTER">
| <K_ALL: "ALL">
| <K_ALTER: "ALTER">
| <K_ANALYZE: "ANALYZE">
| <K_AND: "AND">
| <K_AS: "AS">
| <K_ASC: "ASC">
| <K_ATTACH: "ATTACH">
| <K_AUTOINCREMENT: "AUTOINCREMENT">
| <K_BEFORE: "BEFORE">
| <K_BEGIN: "BEGIN">
| <K_BETWEEN: "BETWEEN">
| <K_BY: "BY">
| <K_CASCADE: "CASCADE">
| <K_CASE: "CASE">
| <K_CAST: "CAST">
| <K_CHECK: "CHECK">
| <K_COLLATE: "COLLATE">
| <K_COLUMN: "COLUMN">
| <K_COMMIT: "COMMIT">
| <K_CONFLICT: "CONFLICT">
| <K_CONSTRAINT: "CONSTRAINT">
| <K_CREATE: "CREATE">
| <K_CROSS: "CROSS">
| <K_CURRENT_DATE: "CURRENT_DATE">
| <K_CURRENT_TIME: "CURRENT_TIME">
| <K_CURRENT_TIMESTAMP: "CURRENT_TIMESTAMP">
| <K_DATABASE: "DATABASE">
| <K_DEFAULT: "DEFAULT">
| <K_DEFERRABLE: "DEFERRABLE">
| <K_DEFERRED: "DEFERRED">
| <K_DELETE: "DELETE">
| <K_DESC: "DESC">
| <K_DETACH: "DETACH">
| <K_DISTINCT: "DISTINCT">
| <K_DROP: "DROP">
| <K_EACH: "EACH">
| <K_ELSE: "ELSE">
| <K_END: "END">
| <K_ESCAPE: "ESCAPE">
| <K_EXCEPT: "EXCEPT">
| <K_EXCLUSIVE: "EXCLUSIVE">
| <K_EXISTS: "EXISTS">
| <K_EXPLAIN: "EXPLAIN">
| <K_FAIL: "FAIL">
| <K_FOR: "FOR">
| <K_FOREIGN: "FOREIGN">
| <K_FROM: "FROM">
| <K_FULL: "FULL">
| <K_GLOB: "GLOB">
| <K_GROUP: "GROUP">
| <K_HAVING: "HAVING">
| <K_IF: "IF">
| <K_IGNORE: "IGNORE">
| <K_IMMEDIATE: "IMMEDIATE">
| <K_IN: "IN">
| <K_INDEX: "INDEX">
| <K_INDEXED: "INDEXED">
| <K_INITIALLY: "INITIALLY">
| <K_INNER: "INNER">
| <K_INSERT: "INSERT">
| <K_INSTEAD: "INSTEAD">
| <K_INTERSECT: "INTERSECT">
| <K_INTO: "INTO">
| <K_IS: "IS">
| <K_ISNULL: "ISNULL">
| <K_JOIN: "JOIN">
| <K_KEY: "KEY">
| <K_LEFT: "LEFT">
| <K_LIKE: "LIKE">
| <K_LIMIT: "LIMIT">
| <K_MATCH: "MATCH">
| <K_NATURAL: "NATURAL">
| <K_NO: "NO">
| <K_NOT: "NOT">
| <K_NOTNULL: "NOTNULL">
| <K_NULL: "NULL">
| <K_OF: "OF">
| <K_OFFSET: "OFFSET">
| <K_ON: "ON">
| <K_OR: "OR">
| <K_ORDER: "ORDER">
| <K_OUTER: "OUTER">
| <K_PLAN: "PLAN">
| <K_PRAGMA: "PRAGMA">
| <K_PRIMARY: "PRIMARY">
| <K_QUERY: "QUERY">
| <K_RAISE: "RAISE">
| <K_RECURSIVE: "RECURSIVE">
| <K_REFERENCES: "REFERENCES">
| <K_REGEXP: "REGEXP">
| <K_REINDEX: "REINDEX">
| <K_RELEASE: "RELEASE">
| <K_RENAME: "RENAME">
| <K_REPLACE: "REPLACE">
| <K_RESTRICT: "RESTRICT">
| <K_RIGHT: "RIGHT">
| <K_ROLLBACK: "ROLLBACK">
| <K_ROW: "ROW">
| <K_SAVEPOINT: "SAVEPOINT">
| <K_SELECT: "SELECT">
| <K_SET: "SET">
| <K_TABLE: "TABLE">
| <K_TEMP: "TEMP">
| <K_TEMPORARY: "TEMPORARY">
| <K_THEN: "THEN">
| <K_TO: "TO">
| <K_TRANSACTION: "TRANSACTION">
| <K_TRIGGER: "TRIGGER">
| <K_UNION: "UNION">
| <K_UNIQUE: "UNIQUE">
| <K_UPDATE: "UPDATE">
| <K_USING: "USING">
| <K_VACUUM: "VACUUM">
| <K_VALUES: "VALUES">
| <K_VIEW: "VIEW">
| <K_VIRTUAL: "VIRTUAL">
| <K_WHEN: "WHEN">
| <K_WHERE: "WHERE">
| <K_WITH: "WITH">
| <K_WITHOUT: "WITHOUT">
}

// Operators

TOKEN: {
 <DOT: ".">
}

TOKEN: {
  <NUMERIC_LITERAL:
      <DIGITS> ("." (<DIGIT>)*)? ( "E" (<SIGN>)? <DIGITS>)?
    |  "." <DIGITS> ("E" (<SIGN>)? <DIGITS>)?
    | "0x" ( <HEX_DIGIT> )+ >
| <#DIGITS: ( <DIGIT> )+ >
| <DIGIT: ["0" - "9"] >
| <#SIGN: ["+", "-"]>
| <#HEX_DIGIT: ["0"-"9","A"-"F"]  >
| <STRING_LITERAL: ("'" ( ~["'"] | "''" )* "'") >
| <BLOB_LITERAL: "X" "'" (<HEX_DIGIT>)+ "'">
| <IDENTIFIER: ["A"-"Z","_"] (["A"-"Z","0"-"9","_"])*
             | "\"" (~["\n","\r","\""] | "\"\"")+ "\""
             | ("`"  (~["\n","\r","`"]  | "``")+   "`")
             | ("["  (~["\n","\r","]"])+           "]") >

| <BIND_PARAMETER: ("?" (<DIGIT>)*) | [":", "@", "$"] <IDENTIFIER> >
}


SQLiteStatement statement(): {
    SQLiteStatement statement;
} {
    statement=createTableStatement()
    {
        return statement;
    }
}

SQLiteCreateTableStatement createTableStatement(): {
    SQLiteCreateTableStatement statement = new SQLiteCreateTableStatement();
    token_source.subscribe(statement);

    SQLiteName tableName;
    SQLiteColumn column;
    SQLiteTableConstraint constraint;
} {
    <K_CREATE> [<K_TEMP> | <K_TEMPORARY>]
    <K_TABLE>
    [<K_IF> <K_NOT> <K_EXISTS>]
    tableName=qualifiedTableName() {
        statement.tableName = tableName;
    }
    "("
        column=column() {
            statement.columns.add(column);
          }
        (
            LOOKAHEAD("," column())
             ","
            column=column() {
                statement.columns.add(column);
            }
        )*

        (
            ","
            constraint=tableConstraint() {
                statement.constraints.add(constraint);
            }
        )*
    ")"
    {
        token_source.unsubscribe(statement);
        return statement;
    }
}


SQLiteColumn column(): {
    SQLiteColumn column = new SQLiteColumn();

    SQLiteName columnName;
    SQLiteType type;
    SQLiteColumnConstraint constraint;
} {
    columnName=name() {
        column.setName(columnName);
    }
    [
        type=typeName() {
            column.setType(type);
        }
    ]
    (
        constraint=columnConstraint() {
            column.addConstraint(constraint);
        }
    )*
    {
        return column;
    }
}

SQLiteColumnConstraint columnConstraint(): {
    SQLiteColumnConstraint constraint = new SQLiteColumnConstraint();
    SQLiteTokenList tokens;
    SQLiteExpression expr;
    SQLiteName name;
} {
    (
        <K_CONSTRAINT>
        name=name() { constraint.name = name; }
    )?
    (
        tokens=primaryKeyConstraint() { constraint.primaryKey = tokens; }
        | LOOKAHEAD(<K_NOT>) <K_NOT> conflictClause() { constraint.nullability = new SQLiteTokenList(token); } <K_NULL> { constraint.nullability.add(token); }
        | <K_NULL> conflictClause() { constraint.nullability = new SQLiteTokenList(token); }
        | <K_UNIQUE> { constraint.unique = new SQLiteTokenList(token); } conflictClause()
        | ( <K_CHECK> "(" expr=expr() ")" ) { constraint.checkExpr = expr; }
        | ( <K_DEFAULT> ( LOOKAHEAD(signedNumber()) expr=signedNumber() | expr=literalValue() | "(" expr=expr() ")" ) ) { constraint.defaultExpr = expr; }
        | <K_COLLATE> name=name() { constraint.collateName = name; }
        | foreignKeyClause()
    )
    {
        return constraint;
    }
}

SQLiteTokenList primaryKeyConstraint(): {
    SQLiteTokenList tokens = new SQLiteTokenList();
} {
    (
        <K_PRIMARY> { tokens.add(token); }
        <K_KEY> { tokens.add(token); }
        (
            <K_ASC> { tokens.add(token); }
            | <K_DESC> { tokens.add(token); }
        )?
        conflictClause()
        (<K_AUTOINCREMENT> { tokens.add(token); })?
    )
    {
        return tokens;
    }
}

SQLiteTableConstraint tableConstraint(): {
    SQLiteName name;
} {
    [<K_CONSTRAINT> name=name()]
    (
        <K_PRIMARY> <K_KEY> "(" indexedColumn() ("," indexedColumn())* ")" conflictClause()
        | <K_UNIQUE> "(" indexedColumn() ("," indexedColumn())* ")" conflictClause()
        | <K_CHECK> "(" expr() ")"
        | <K_FOREIGN> <K_KEY> "(" name() ("," name())* ")" foreignKeyClause()
    )
    {
        return new SQLiteTableConstraint();
    }
}

void conflictClause(): {
} {
    (<K_ON> <K_CONFLICT> (<K_ROLLBACK> | <K_ABORT> | <K_FAIL> | <K_IGNORE> | <K_REPLACE>))?
}

void foreignKeyClause(): {
} {
    <K_REFERENCES> <IDENTIFIER> [ "(" <IDENTIFIER> ("," <IDENTIFIER>)* ")" ]
    (
        (<K_ON> (<K_DELETE> | <K_UPDATE>)
            (<K_SET> ( <K_NULL> | <K_DEFAULT> ) | <K_CASCADE> | <K_RESTRICT> | <K_NO> <K_ACTION>))
        |
        (<K_MATCH> <IDENTIFIER>)
    )*
    [
         LOOKAHEAD(2) [<K_NOT>] <K_DEFERRABLE> [<K_INITIALLY> [<K_DEFERRED> | <K_IMMEDIATE>]]
    ]
}

void indexedColumn(): {

} {
    expr() [ <K_COLLATE> name() ] [ <K_ASC> | <K_DESC> ]
}


SQLiteExpression expr(): {
    SQLiteExpression expr;
} {
    expr=orExpr()
    {
        return expr;
    }
}


SQLiteExpression orExpr(): {
    SQLiteExpression leftExpr;
    SQLiteToken binOp;
    SQLiteExpression rightExpr;
} {
    leftExpr=andExpr()
    (
        <K_OR> { binOp = SQLiteToken.create(token); }
        rightExpr=andExpr() {
            leftExpr = new SQLiteBinaryOpExpression(leftExpr, binOp, rightExpr);
        }
    )*
    {
        return leftExpr;
    }
}

SQLiteExpression andExpr(): {
    SQLiteExpression leftExpr;
    SQLiteToken binOp;
    SQLiteExpression rightExpr;
} {
    leftExpr=equativeExpr()
    (
        <K_AND> { binOp = SQLiteToken.create(token); }
        rightExpr=equativeExpr() {
            leftExpr = new SQLiteBinaryOpExpression(leftExpr, binOp, rightExpr);
        }
    )*
    {
        return leftExpr;
    }
}

SQLiteExpression equativeExpr(): {
    SQLiteExpression leftExpr;
    SQLiteToken binOp1 = null;
    SQLiteToken binOp2 = null;
    SQLiteExpression rightExpr;
} {
    leftExpr=comparativeExpr()
    (
        (
            ("==" | "=" | "!=" | "<>") { binOp1 = SQLiteToken.create(token); }
            | <K_IS>  { binOp1 = SQLiteToken.create(token); }
                [ LOOKAHEAD(<K_NOT>) <K_NOT> { binOp2 = SQLiteToken.create(token); } ]
            | [ <K_NOT> { binOp1 = SQLiteToken.create(token); } ]
                (<K_IN> | <K_LIKE> | <K_GLOB> | <K_MATCH> | <K_REGEXP>)  { binOp2 = SQLiteToken.create(token); }
        )
        rightExpr=comparativeExpr() {
            leftExpr = new SQLiteBinaryOpExpression(leftExpr, binOp1, binOp2, rightExpr);
        }
    )*
    {
        return leftExpr;
    }
}

SQLiteExpression comparativeExpr(): {
    SQLiteExpression leftExpr;
    SQLiteToken binOp;
    SQLiteExpression rightExpr;
} {
    leftExpr=shiftiveExpr()
    (
        ( "<" | "<=" | ">" | ">=" ) { binOp = SQLiteToken.create(token); }
        rightExpr=shiftiveExpr() {
            leftExpr = new SQLiteBinaryOpExpression(leftExpr, binOp, rightExpr);
        }
    )*
    {
        return leftExpr;
    }
}

SQLiteExpression shiftiveExpr(): {
    SQLiteExpression leftExpr;
    SQLiteToken binOp;
    SQLiteExpression rightExpr;
} {
    leftExpr=additiveExpr()
    (
        ( "<<" | ">>" | "&" | "|" ) { binOp = SQLiteToken.create(token); }
        rightExpr=additiveExpr() {
            leftExpr = new SQLiteBinaryOpExpression(leftExpr, binOp, rightExpr);
        }
    )*
    {
        return leftExpr;
    }
}

SQLiteExpression additiveExpr(): {
    SQLiteExpression leftExpr;
    SQLiteToken binOp;
    SQLiteExpression rightExpr;
} {
    leftExpr=multiplicativeExpr()
    (
        ( "+" | "-" ) { binOp = SQLiteToken.create(token); }
        rightExpr=multiplicativeExpr() {
            leftExpr = new SQLiteBinaryOpExpression(leftExpr, binOp, rightExpr);
        }
    )*
    {
        return leftExpr;
    }
}

SQLiteExpression multiplicativeExpr(): {
    SQLiteExpression leftExpr;
    SQLiteToken binOp;
    SQLiteExpression rightExpr;
} {
    leftExpr=concatExpr()
    (
        ( "*" | "/" | "%" ) { binOp = SQLiteToken.create(token); }
        rightExpr=concatExpr() {
            leftExpr = new SQLiteBinaryOpExpression(leftExpr, binOp, rightExpr);
        }
    )*
    {
        return leftExpr;
    }
}

SQLiteExpression concatExpr(): {
    SQLiteExpression leftExpr;
    SQLiteToken binOp;
    SQLiteExpression rightExpr;
} {
    leftExpr=primaryExpr()
    (
        "||" { binOp = SQLiteToken.create(token); }
        rightExpr=primaryExpr() {
            leftExpr = new SQLiteBinaryOpExpression(leftExpr, binOp, rightExpr);
        }
    )*
    {
        return leftExpr;
    }
}

SQLiteExpression primaryExpr(): {
    SQLiteName name;
    SQLiteToken unaryOp = null;
    SQLiteExpression expr;
} {
    (
        [ ("+" | "-") { unaryOp = SQLiteToken.create(token); } ]
        (
            expr=literalValue()
            | LOOKAHEAD(functionExpr()) expr=functionExpr()
            | <BIND_PARAMETER> { expr = new SQLiteBindParameterExpression(token.image); }
            | name=qualifiedColumnName() { expr = new SQLiteNameExpr(name); }
            | expr=castExpr()
            | "(" expr=exprList() ")"
        )
    )
    {
        return unaryOp != null ? new SQLiteUnaryOpExpression(unaryOp, expr) : expr;
    }
}

SQLiteFunctionExpression functionExpr(): {
    SQLiteName name;
    SQLiteKeyword distinct = null;
    SQLiteToken wildcard = null;
    SQLiteListExpression args = null;
}
{
    name=name()
    "("
        (
            (
                <K_DISTINCT> { distinct = new SQLiteKeyword(token.image); }
            )?
            args=exprList()
            |  "*" { wildcard = SQLiteToken.create(token); }
        )?
    ")"
    {
        return new SQLiteFunctionExpression(name, distinct, wildcard, args);
    }
}

SQLiteCastExpression castExpr(): {
    SQLiteExpression expr ;
    SQLiteType type;
} {
    <K_CAST> "(" expr=expr() <K_AS> type=typeName() ")"
    {
        return new SQLiteCastExpression(expr, type);
    }
}

SQLiteListExpression exprList(): {
    SQLiteListExpression listExpr = new SQLiteListExpression();
    SQLiteExpression expr;
} {
    (
        expr=expr() { listExpr.add(expr); }
        ("," expr=expr() { listExpr.add(expr); } )*
    )
    {
        return listExpr;
    }
}

SQLiteExpression literalValue(): {
    SQLiteExpression expr;
} {
    (
        <NUMERIC_LITERAL> { expr = new SQLiteNumericLiteral(token.image); }
        | <STRING_LITERAL> { expr = new SQLiteStringLiteral(token.image); }
        | <BLOB_LITERAL> { expr = new SQLiteBlobLiteral(token.image); }
        | <K_NULL> { expr = new SQLiteNullLiteral(token.image); }
        | <K_CURRENT_TIME> { expr = new SQLiteTimeLiteral(token.image); }
        | <K_CURRENT_DATE> { expr = new SQLiteTimeLiteral(token.image); }
        | <K_CURRENT_TIMESTAMP> { expr = new SQLiteTimeLiteral(token.image); }
    )
    {
        return expr;
    }
}

SQLiteExpression signedNumber(): {
    SQLiteToken op = null;
    SQLiteExpression expr;
} {

    (op=sign())? <NUMERIC_LITERAL> { expr = new SQLiteNumericLiteral(token.image); }
    {
        return op != null ? new SQLiteUnaryOpExpression(op, expr) : expr;
    }
}

SQLiteToken sign(): {
} {
    ("+" | "-")
    {
        return SQLiteToken.create(token);
    }
}

SQLiteType typeName(): {
    SQLiteName name;
    SQLiteExpression p1 = null;
    SQLiteExpression p2 = null;
}
{
    name=name() [ "(" p1=signedNumber() ["," p2=signedNumber()] ")" ]
    {
        return new SQLiteType(name, p1, p2);
    }
}

SQLiteName qualifiedColumnName(): {
    SQLiteName name1;
    SQLiteName name2 = null;
    SQLiteName name3 = null;
}
{
     name1=name() [ <DOT> name2=name() [ <DOT> name3=name() ] ]
    {
        if (name3 != null) {
            return new SQLiteQualifiedName(new SQLiteQualifiedName(name1, name2), name3);
        } else if (name2 != null) {
            return new SQLiteQualifiedName(name1, name2);
        } else {
            return name1;
        }
    }
}


SQLiteName qualifiedTableName(): {
    SQLiteName name1;
    SQLiteName name2 = null;
}
{
    name1=name() [ <DOT> name2=name() ]
    {
        return name2 == null ? name1 : new SQLiteQualifiedName(name1, name2);
    }
}

SQLiteName name(): {
} {
    <IDENTIFIER>
    {
        return new SQLiteSimpleName(token.image);
    }
}
